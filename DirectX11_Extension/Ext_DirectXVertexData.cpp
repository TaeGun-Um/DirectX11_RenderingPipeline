#include "PrecompileHeader.h"
#include "Ext_DirectXVertexData.h"

InputLayoutData Ext_DirectXVertexData::ILData;

void InputLayoutData::AddInputLayoutDesc
(
	/*1*/LPCSTR _SemanticName, 
	/*2*/DXGI_FORMAT _Format, 
	/*3*/D3D11_INPUT_CLASSIFICATION _InputSlotClass, 
	/*4*/UINT _InstanceDataStepRate, 
	/*5*/UINT _AlignedByteOffset, 
	/*6*/UINT _InputSlot,
	/*7*/UINT _SemanticIndex
)
{
	// <<인자 설명>>
	/*1. LPCSTR :  정점 요소의 의미(Semantic)를 나타내는 문자열, "POSITION", "NORMAL", "TEXCOORD", "COLOR" 등으로, Vertex Shader의 입력 파라미터 이름과 일치해야함*/
	/*2. DXGI_FORMAT : 해당 요소의 데이터 형식을 지정함, DXGI_FORMAT_R32G32B32_FLOAT는 float3, DXGI_FORMAT_R32G32_FLOAT는 float2 등으로, 셰이더가 해석할 데이터 구조와 일치해야함*/
	/*3. D3D11_INPUT_CLASSIFICATION : 정점 데이터가 정점 당(per Vetex)인지, 인스턴스 당(per Instance)인지 구분, D3D11_INPUT_PER_VERTEX_DATA나 D3D11_INPUT_PER_INSTANCE_DATA 전달*/
	/*4. UINT : InputSlotClass가 PER_VERTEX_DATA일 경우에만 사용됨, 인스턴스 몇 개마다 해당 데이터를 한 번씩 사용할지 지정하며, 보통 1을 사용(1 인스턴스 당 1개 값)*/
	/*5. UINT : 정점 구조체 내에서 이 요소가 몇 바이트 떨어져 있는지 명시, D3D11_APPEND_ALIGNED_ELEMENT를 자동 계산이 가능하며, 수동 지정 시 수동으로 누적 오프셋을 관리해야함*/
	/*6. UINT : 어떤 버퍼 슬롯에서 데이터를 읽어올 지 지정, IASetVertexBuffers() 함수에서 바인딩된 슬롯과 일치해야함, 예시로 0번 슬롯은 POSITION, 1번 슬롯은 TEXTCOORD 이런 식으로*/
	/*7. UINT : 같은 SemanticName이 여러 개 있을 경우, 몇 번째인지 구분함, TEXTCOORD0, TEXTCOORD1이 있으면 각 index는 0, 1*/
	D3D11_INPUT_ELEMENT_DESC Data;

	Data.SemanticName = _SemanticName;
	Data.Format = _Format;
	Data.InputSlotClass = _InputSlotClass;
	Data.InstanceDataStepRate = _InstanceDataStepRate;
	Data.AlignedByteOffset = Offset;
	Data.InputSlot = _InputSlot;
	Data.SemanticIndex = _SemanticIndex;

	Offset += FormatSize(Data.Format);
	InputLayoutDescs.push_back(Data);
}

// 포멧 크기 확인용
UINT InputLayoutData::FormatSize(DXGI_FORMAT _Format)
{
	switch (_Format)
	{
	case DXGI_FORMAT_UNKNOWN:
	{
		MsgAssert("Format 설정이 잘못됐습니다.");
		return -1;
	}
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32A32_FLOAT:
	case DXGI_FORMAT_R32G32B32A32_UINT:
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return 16;
	case DXGI_FORMAT_R32G32B32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_FLOAT:
	case DXGI_FORMAT_R32G32B32_UINT:
	case DXGI_FORMAT_R32G32B32_SINT:
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
	case DXGI_FORMAT_R16G16B16A16_UNORM:
	case DXGI_FORMAT_R16G16B16A16_UINT:
	case DXGI_FORMAT_R16G16B16A16_SNORM:
	case DXGI_FORMAT_R16G16B16A16_SINT:
	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G32_FLOAT:
	case DXGI_FORMAT_R32G32_UINT:
	case DXGI_FORMAT_R32G32_SINT:
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
	case DXGI_FORMAT_R10G10B10A2_UNORM:
	case DXGI_FORMAT_R10G10B10A2_UINT:
	case DXGI_FORMAT_R11G11B10_FLOAT:
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_UNORM:
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DXGI_FORMAT_R8G8B8A8_UINT:
	case DXGI_FORMAT_R8G8B8A8_SNORM:
	case DXGI_FORMAT_R8G8B8A8_SINT:
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_FLOAT:
	case DXGI_FORMAT_R16G16_UNORM:
	case DXGI_FORMAT_R16G16_UINT:
	case DXGI_FORMAT_R16G16_SNORM:
	case DXGI_FORMAT_R16G16_SINT:
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_R32_UINT:
	case DXGI_FORMAT_R32_SINT:
		return 4;
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R8G8_UNORM:
	case DXGI_FORMAT_R8G8_UINT:
	case DXGI_FORMAT_R8G8_SNORM:
	case DXGI_FORMAT_R8G8_SINT:
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_FLOAT:
	case DXGI_FORMAT_D16_UNORM:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_R16_UINT:
	case DXGI_FORMAT_R16_SNORM:
	case DXGI_FORMAT_R16_SINT:
	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_UNORM:
	case DXGI_FORMAT_R8_UINT:
	case DXGI_FORMAT_R8_SNORM:
	case DXGI_FORMAT_R8_SINT:
	case DXGI_FORMAT_A8_UNORM:
	case DXGI_FORMAT_R1_UNORM:
	case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
	case DXGI_FORMAT_R8G8_B8G8_UNORM:
	case DXGI_FORMAT_G8R8_G8B8_UNORM:
	case DXGI_FORMAT_BC1_TYPELESS:
	case DXGI_FORMAT_BC1_UNORM:
	case DXGI_FORMAT_BC1_UNORM_SRGB:
	case DXGI_FORMAT_BC2_TYPELESS:
	case DXGI_FORMAT_BC2_UNORM:
	case DXGI_FORMAT_BC2_UNORM_SRGB:
	case DXGI_FORMAT_BC3_TYPELESS:
	case DXGI_FORMAT_BC3_UNORM:
	case DXGI_FORMAT_BC3_UNORM_SRGB:
	case DXGI_FORMAT_BC4_TYPELESS:
	case DXGI_FORMAT_BC4_UNORM:
	case DXGI_FORMAT_BC4_SNORM:
	case DXGI_FORMAT_BC5_TYPELESS:
	case DXGI_FORMAT_BC5_UNORM:
	case DXGI_FORMAT_BC5_SNORM:
	case DXGI_FORMAT_B5G6R5_UNORM:
	case DXGI_FORMAT_B5G5R5A1_UNORM:
	case DXGI_FORMAT_B8G8R8A8_UNORM:
	case DXGI_FORMAT_B8G8R8X8_UNORM:
	case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
	case DXGI_FORMAT_B8G8R8A8_TYPELESS:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8X8_TYPELESS:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
	case DXGI_FORMAT_BC6H_TYPELESS:
	case DXGI_FORMAT_BC6H_UF16:
	case DXGI_FORMAT_BC6H_SF16:
	case DXGI_FORMAT_BC7_TYPELESS:
	case DXGI_FORMAT_BC7_UNORM:
	case DXGI_FORMAT_BC7_UNORM_SRGB:
	case DXGI_FORMAT_AYUV:
	case DXGI_FORMAT_Y410:
	case DXGI_FORMAT_Y416:
	case DXGI_FORMAT_NV12:
	case DXGI_FORMAT_P010:
	case DXGI_FORMAT_P016:
	case DXGI_FORMAT_420_OPAQUE:
	case DXGI_FORMAT_YUY2:
	case DXGI_FORMAT_Y210:
	case DXGI_FORMAT_Y216:
	case DXGI_FORMAT_NV11:
	case DXGI_FORMAT_AI44:
	case DXGI_FORMAT_IA44:
	case DXGI_FORMAT_P8:
	case DXGI_FORMAT_A8P8:
	case DXGI_FORMAT_B4G4R4A4_UNORM:
	case DXGI_FORMAT_P208:
	case DXGI_FORMAT_V208:
	case DXGI_FORMAT_V408:
	case DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE:
	case DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE:
	case DXGI_FORMAT_FORCE_UINT:
	{
		MsgAssert("Format 크기가 정해지지 않았습니다. Ext_DirectXVertex 클래스에서 정해주세요");
		return -1;
	}
	default:
		break;
	}

	MsgAssert("말도 안됨");
	return -1;
}